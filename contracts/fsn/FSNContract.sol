pragma solidity ^0.5.4;

contract FSNContract {
    address constant precompile = address(0x9999999999999999999999999999999999999999);

    // these events will be generated by the low level impl.
    event LogFusionAssetReceived(bytes32 indexed _asset, address indexed _from, uint256 _value, uint64 _start, uint64 _end, SendAssetFlag _flag);
    event LogFusionAssetSent(bytes32 indexed _asset, address indexed _to, uint256 _value, uint64 _start, uint64 _end, SendAssetFlag _flag);

    enum SendAssetFlag {
        UseAny,                 // 0
        UseAnyToTimeLock,       // 1
        UseTimeLock,            // 2
        UseTimeLockToTimeLock,  // 3
        UseAsset,               // 4
        UseAssetToTimeLock      // 5
    }

    function _sendAsset(bytes32 asset, address to, uint256 value, uint64 start, uint64 end, SendAssetFlag flag) internal returns (bool, bytes memory) {
        bytes memory input = abi.encode(1, asset, to, value, start, end, flag);
        return precompile.call(input);
    }
}
